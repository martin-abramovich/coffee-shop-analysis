#!/usr/bin/env python3
"""
Demostraci√≥n completa del soporte para m√∫ltiples clientes concurrentes.

Este script demuestra todas las mejoras implementadas:
1. Soporte para m√∫ltiples ejecuciones sin reinicio del servidor
2. M√∫ltiples clientes concurrentes
3. Protocolo de finalizaci√≥n EOF robusto
4. Limpieza correcta de recursos
5. Logs de depuraci√≥n para visibilidad del protocolo
"""

import sys
import os
import time
import subprocess
import threading
import logging

# A√±adir el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def run_eof_protocol_test():
    """Ejecuta el test del protocolo EOF"""
    logger.info("üß™ Ejecutando test del protocolo EOF...")
    
    try:
        from tests.test_eof_protocol import run_simple_eof_test, run_complex_eof_test
        
        # Test simple
        logger.info("Test simple del protocolo EOF...")
        result1 = run_simple_eof_test()
        
        time.sleep(1)
        
        # Test complejo
        logger.info("Test complejo del protocolo EOF...")
        result2 = run_complex_eof_test()
        
        success = result1 and result2
        logger.info(f"Protocolo EOF: {'‚úÖ PAS√ì' if success else '‚ùå FALL√ì'}")
        return success
        
    except Exception as e:
        logger.error(f"Error ejecutando test EOF: {e}")
        return False

def run_multi_session_test():
    """Ejecuta el test de m√∫ltiples sesiones"""
    logger.info("üë• Ejecutando test de m√∫ltiples sesiones...")
    
    try:
        from client.multi_session_client import MultiSessionClient
        
        client = MultiSessionClient()
        
        # Test secuencial (m√∫ltiples ejecuciones)
        logger.info("Test de m√∫ltiples ejecuciones secuenciales...")
        results1 = client.run_sequential_sessions(num_sessions=2)
        
        time.sleep(2)
        
        # Reset contadores
        client.sessions_completed = 0
        client.sessions_failed = 0
        
        # Test concurrente
        logger.info("Test de clientes concurrentes...")
        results2 = client.run_concurrent_sessions(num_sessions=3, max_delay=0.5)
        
        success = (results1['success_rate'] >= 100.0 and 
                  results2['success_rate'] >= 75.0)
        
        logger.info(f"M√∫ltiples sesiones: {'‚úÖ PAS√ì' if success else '‚ùå FALL√ì'}")
        return success
        
    except Exception as e:
        logger.error(f"Error ejecutando test de m√∫ltiples sesiones: {e}")
        return False

def check_gateway_running():
    """Verifica si el gateway est√° ejecut√°ndose"""
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 9000))
        sock.close()
        return result == 0
    except:
        return False

def show_demo_summary():
    """Muestra un resumen de las mejoras implementadas"""
    logger.info("\n" + "="*80)
    logger.info("üìã RESUMEN DE MEJORAS IMPLEMENTADAS")
    logger.info("="*80)
    
    improvements = [
        "‚úÖ Soporte para m√∫ltiples ejecuciones de consultas sin reinicio del servidor",
        "‚úÖ Ejecuci√≥n con m√∫ltiples clientes concurrentemente", 
        "‚úÖ Correcta limpieza de recursos despu√©s de cada ejecuci√≥n",
        "‚úÖ Protocolo robusto de finalizaci√≥n EOF (N nodos a M nodos)",
        "‚úÖ Logs de depuraci√≥n detallados para visibilidad del protocolo",
        "‚úÖ Gesti√≥n de sesiones con IDs √∫nicos",
        "‚úÖ Manejo de errores y reconexi√≥n autom√°tica",
        "‚úÖ Monitoreo de recursos activos y limpieza autom√°tica",
        "‚úÖ Tests aislados para validar el protocolo EOF",
        "‚úÖ Soporte para graceful shutdown con se√±ales"
    ]
    
    for improvement in improvements:
        logger.info(f"  {improvement}")
    
    logger.info("\nüìÅ ARCHIVOS NUEVOS/MODIFICADOS:")
    files = [
        "gateway/server.py - Soporte para m√∫ltiples clientes concurrentes",
        "gateway/main.py - Threading y manejo de se√±ales",
        "gateway/eof_protocol.py - Protocolo EOF robusto (NUEVO)",
        "gateway/resource_manager.py - Gesti√≥n de recursos (NUEVO)",
        "tests/test_eof_protocol.py - Test aislado del protocolo (NUEVO)",
        "client/multi_session_client.py - Cliente de m√∫ltiples sesiones (NUEVO)",
        "run_eof_test.py - Script para ejecutar tests (NUEVO)",
        "demo_multiple_clients.py - Demostraci√≥n completa (NUEVO)"
    ]
    
    for file_desc in files:
        logger.info(f"  üìÑ {file_desc}")
    
    logger.info("\nüîß CARACTER√çSTICAS T√âCNICAS:")
    features = [
        "Protocolo EOF coordina N clientes -> M workers",
        "Cada cliente tiene ID de sesi√≥n √∫nico (UUID)",
        "Workers solo reciben EOF cuando TODOS los clientes terminaron",
        "Limpieza autom√°tica de conexiones, threads y recursos",
        "Logs detallados con timestamps y IDs de sesi√≥n",
        "Manejo robusto de errores con reconexi√≥n",
        "Tests automatizados para validar funcionalidad",
        "Soporte para shutdown graceful"
    ]
    
    for feature in features:
        logger.info(f"  üîπ {feature}")

def main():
    """
    Funci√≥n principal de la demostraci√≥n.
    
    Ejecuta todos los tests para demostrar las mejoras implementadas.
    """
    logger.info("üöÄ DEMOSTRACI√ìN: SOPORTE PARA M√öLTIPLES CLIENTES CONCURRENTES")
    logger.info("="*80)
    logger.info("Esta demostraci√≥n valida todas las mejoras implementadas:")
    logger.info("‚Ä¢ M√∫ltiples ejecuciones sin reinicio")
    logger.info("‚Ä¢ M√∫ltiples clientes concurrentes") 
    logger.info("‚Ä¢ Protocolo EOF robusto")
    logger.info("‚Ä¢ Limpieza correcta de recursos")
    logger.info("‚Ä¢ Logs de depuraci√≥n detallados")
    logger.info("-"*80)
    
    # Verificar si el gateway est√° corriendo
    gateway_running = check_gateway_running()
    
    if gateway_running:
        logger.info("üåê Gateway detectado en localhost:9000")
        logger.info("‚ÑπÔ∏è  Se ejecutar√°n tests que requieren el gateway")
    else:
        logger.warning("‚ö†Ô∏è  Gateway no detectado en localhost:9000")
        logger.info("‚ÑπÔ∏è  Se ejecutar√°n solo tests independientes")
    
    all_tests_passed = True
    
    # Test 1: Protocolo EOF (independiente)
    logger.info("\n" + "="*50)
    logger.info("TEST 1: Protocolo de Finalizaci√≥n EOF")
    logger.info("="*50)
    logger.info("Este test demuestra el protocolo EOF robusto N->M nodos")
    
    try:
        result1 = run_eof_protocol_test()
        all_tests_passed = all_tests_passed and result1
    except Exception as e:
        logger.error(f"Error en test EOF: {e}")
        all_tests_passed = False
    
    # Test 2: M√∫ltiples sesiones (requiere gateway)
    if gateway_running:
        logger.info("\n" + "="*50)
        logger.info("TEST 2: M√∫ltiples Sesiones con Gateway")
        logger.info("="*50)
        logger.info("Este test demuestra m√∫ltiples clientes concurrentes")
        
        try:
            result2 = run_multi_session_test()
            all_tests_passed = all_tests_passed and result2
        except Exception as e:
            logger.error(f"Error en test de m√∫ltiples sesiones: {e}")
            all_tests_passed = False
    else:
        logger.info("\n" + "="*50)
        logger.info("TEST 2: M√∫ltiples Sesiones - OMITIDO")
        logger.info("="*50)
        logger.info("‚ö†Ô∏è  Gateway no disponible - test omitido")
        logger.info("Para ejecutar este test:")
        logger.info("1. docker-compose up --build")
        logger.info("2. Esperar que el gateway est√© listo")
        logger.info("3. Ejecutar este script nuevamente")
    
    # Mostrar resumen de mejoras
    show_demo_summary()
    
    # Resultado final
    logger.info("\n" + "="*80)
    logger.info("üèÅ RESULTADO FINAL DE LA DEMOSTRACI√ìN")
    logger.info("="*80)
    
    if all_tests_passed:
        logger.info("üéâ DEMOSTRACI√ìN EXITOSA")
        logger.info("‚úÖ Todas las mejoras funcionan correctamente")
        logger.info("‚úÖ El sistema soporta m√∫ltiples clientes concurrentes")
        logger.info("‚úÖ El protocolo EOF es robusto y confiable")
        logger.info("‚úÖ La limpieza de recursos funciona adecuadamente")
        
        if not gateway_running:
            logger.info("\n‚ÑπÔ∏è  Para una demostraci√≥n completa, ejecutar con el gateway activo")
        
        return 0
    else:
        logger.error("‚ùå DEMOSTRACI√ìN FALL√ì")
        logger.error("Revisar logs para identificar problemas")
        return 1

if __name__ == "__main__":
    exit(main())
